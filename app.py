import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os

st.set_page_config(page_title="Simulation Apprentissage F√©d√©r√©", layout="wide")

# Chemins des fichiers
REAL_PATHS = {
    "FedAvg": "results/resultats_fedavg.csv",
    "FedProx": "results/resultats_fedprox.csv"
}
SIMUL_PATHS = {
    "FedAvg": "results/resultats_fedavg_simul.csv",
    "FedProx": "results/resultats_fedprox_simul.csv"
}

# Fonction pour charger les donn√©es
def load_data(algo, use_simulated=False):
    path = SIMUL_PATHS[algo] if use_simulated else REAL_PATHS[algo]
    if not os.path.exists(path):
        return None
    return pd.read_csv(path)

# Fonction pour simuler et √©crire des donn√©es
def simulate_data():
    rounds = [1, 2, 3]
    clients = [0, 1]

    data = {
        "FedAvg": [],
        "FedProx": []
    }

    for r in rounds:
        for c in clients:
            acc_avg = round(0.85 + np.random.rand() * 0.05, 4)
            acc_prox = round(0.87 + np.random.rand() * 0.05, 4)
            loss_avg = round(0.5 - np.random.rand() * 0.1, 4)
            loss_prox = round(0.48 - np.random.rand() * 0.1, 4)
            data["FedAvg"].append([r, c, acc_avg, loss_avg, "FedAvg"])
            data["FedProx"].append([r, c, acc_prox, loss_prox, "FedProx"])

    os.makedirs("results", exist_ok=True)
    for algo in ["FedAvg", "FedProx"]:
        filename = SIMUL_PATHS[algo]
        with open(filename, "w", newline="") as f:
            f.write("round,client_id,accuracy,loss,algorithm\n")
            for row in data[algo]:
                f.write(",".join(map(str, row)) + "\n")

    st.success("Les donn√©es simul√©es ont √©t√© enregistr√©es."
    "Assurez-vous que le mode de visualisation *Donn√©es simul√©es* √† gauche est s√©lectionn√© pour les visualiser.")

# Fonction pour supprimer les fichiers simul√©s
def delete_simulated_files():
    deleted = False
    for file in SIMUL_PATHS.values():
        if os.path.exists(file):
            os.remove(file)
            deleted = True
    return deleted

# Titre principal
st.title("Comparaison des algorithmes FedAvg et FedProx")

# Message explicatif 
st.info(
    "üéØ Cette application permet de **visualiser les r√©sultats de l'apprentissage f√©d√©r√©** "
    "r√©alis√© avec les algorithmes **FedAvg** et **FedProx**, √† l'aide du framework **Flower**.\n\n"
    
    "üìä Deux m√©triques principales sont affich√©es : la **pr√©cision (accuracy)** et la **perte (loss)**, "
    "√©voluant au fil des rounds d'entra√Ænement.\n\n"

    "üìÅ Les donn√©es peuvent provenir de deux sources :\n"
    "- **Donn√©es r√©elles** : r√©sultats √©xperimentales enregistr√©s automatiquement lors d'entra√Ænements f√©d√©r√©s r√©els avec Flower (voir rapport),\n"
    "- **Donn√©es simul√©es** : r√©sultats fictifs que vous pouvez g√©n√©r√©s √† des fins de d√©monstration en cliquant sur le bouton *Simuler les rounds avec donnees fictives*.\n\n"

    "üß† Lors des entra√Ænements r√©els(√©xperimentation expliqu√©e dans le rapport), seules les **valeurs d‚Äôaccuracy** ont pu √™tre r√©cup√©r√©es automatiquement. "
    "Les **valeurs de perte (loss)** n‚Äôont pas √©t√© enregistr√©es car la strat√©gie utilis√©e dans Flower ne renvoyait pas cette information. "
    "Pour une meilleure exp√©rience visuelle, des pertes **repr√©sentatives ont √©t√© simul√©es** pour accompagner les courbes.\n\n"

    "‚öôÔ∏è Dans la barre lat√©rale (√† gauche) :\n"
    "- Utilisez le s√©lecteur *Mode de visualisation* pour basculer entre les donn√©es r√©elles(exp√©rimentales) et simul√©es,\n"
    "- Cliquez sur *Simuler les rounds avec donn√©es fictives* pour g√©n√©rer de nouvelles donn√©es fictives,\n"
    "- Cliquez sur *Supprimer les donn√©es simul√©es* pour effacer les fichiers simul√©s si besoin.\n\n"

    "üìå Les r√©sultats sont affich√©s sous forme de **courbes comparatives** permettant d‚Äôanalyser les performances de chaque algorithme."
)


# Barre lat√©rale
mode = st.sidebar.radio("Mode de visualisation", ("Donn√©es exp√©rimentales", "Donn√©es simul√©es"))

# Boutons d'action
if st.sidebar.button("Simuler les rounds avec donn√©es fictives"):
    simulate_data()

if st.sidebar.button("Supprimer les donn√©es simul√©es"):
    if delete_simulated_files():
        st.success("Les fichiers simul√©s ont √©t√© supprim√©s.")
    else:
        st.warning("Aucun fichier simul√© √† supprimer.")

use_simulated = mode == "Donn√©es simul√©es"

# Chargement des donn√©es
fedavg_df = load_data("FedAvg", use_simulated)
fedprox_df = load_data("FedProx", use_simulated)

if fedavg_df is not None and fedprox_df is not None:
    fedavg_grouped = fedavg_df.groupby("round").mean(numeric_only=True)
    fedprox_grouped = fedprox_df.groupby("round").mean(numeric_only=True)

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))

    ax1.plot(fedavg_grouped.index, fedavg_grouped["accuracy"], marker='o', label="FedAvg Accuracy")
    ax1.plot(fedprox_grouped.index, fedprox_grouped["accuracy"], marker='s', label="FedProx Accuracy")
    ax1.set_title("Accuracy moyenne par round")
    ax1.set_xlabel("Round")
    ax1.set_ylabel("Accuracy")
    ax1.grid(True)
    ax1.legend()

    ax2.plot(fedavg_grouped.index, fedavg_grouped["loss"], marker='o', linestyle='--', label="FedAvg Loss")
    ax2.plot(fedprox_grouped.index, fedprox_grouped["loss"], marker='s', linestyle='--', label="FedProx Loss")
    ax2.set_title("Loss moyenne par round")
    ax2.set_xlabel("Round")
    ax2.set_ylabel("Loss")
    ax2.grid(True)
    ax2.legend()

    st.pyplot(fig)
else:
    st.warning("Les fichiers CSV sont introuvables ou vides. Lance une simulation de l'entra√Ænement r√©el en cliquant sur le bouton 'Simuler les rounds avec donn√©es fictives'.")

